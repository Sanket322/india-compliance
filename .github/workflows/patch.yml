name: Patch

on:
  pull_request:
    paths-ignore:
      - '**.js'
      - '**.css'
      - '**.md'
      - '**.html'
      - '**.csv'
  workflow_dispatch:

concurrency:
  group: patch-develop-${{ github.event_name }}-${{ github.event.number || github.event_name == 'workflow_dispatch' && github.run_id || '' }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    name: Patch Test

    services:
      mariadb:
        image: mariadb:10.6
        env:
          MARIADB_ROOT_PASSWORD: 'travis'
        ports:
          - 3306:3306
        options: --health-cmd="mariadb-admin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Check for valid Python & Merge Conflicts
        run: |
          python -m compileall -f "${GITHUB_WORKSPACE}"
          if grep -lr --exclude-dir=node_modules "^<<<<<<< " "${GITHUB_WORKSPACE}"
              then echo "Found merge conflicts"
              exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true

      - name: Add to Hosts
        run: echo "127.0.0.1 test_site" | sudo tee -a /etc/hosts

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Calculate Branch to Clone
        run: |
          githubbranch=${GITHUB_BASE_REF:-${GITHUB_REF##*/}}
          frappebranch=${FRAPPE_BRANCH:-$githubbranch}
          echo "BRANCH_TO_CLONE=$frappebranch" >> $GITHUB_ENV
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_REF: ${{ github.ref }}
          FRAPPE_BRANCH: ${{ env.FrappeBranch }}

      - name: Install
        run: |
          bash ${GITHUB_WORKSPACE}/.github/helper/install.sh
        env:
          # BRANCH_TO_CLONE: ${{ env.BRANCH_TO_CLONE }}
          BRANCH_TO_CLONE: version-14

      - name: Run Patch Tests
        run: |
          cd ~/frappe-bench/
          jq 'del(.install_apps)' ~/frappe-bench/sites/test_site/site_config.json > tmp.json
          mv tmp.json ~/frappe-bench/sites/test_site/site_config.json

          wget https://erpnext.com/files/v13-erpnext.sql.gz
          bench --site test_site restore ~/frappe-bench/v13-erpnext.sql.gz

          git -C "apps/frappe" remote set-url upstream https://github.com/frappe/frappe.git
          git -C "apps/erpnext" remote set-url upstream https://github.com/frappe/erpnext.git
          git -C "apps/india_compliance" remote set-url upstream https://github.com/resilient-tech/india-compliance.git

          function update_to_version() {
              version=$1

              tag_name="v$version"
              echo "Updating to $tag_name"

              echo "Fetching tags"
              git -C "apps/frappe" fetch --tags upstream
              git -C "apps/erpnext" fetch --tags upstream
              git -C "apps/india_compliance" fetch --tags upstream

              echo "Listing available tags for verification"
              git -C "apps/frappe" tag
              git -C "apps/erpnext" tag
              git -C "apps/india_compliance" tag

              echo "Checking out tags"
              git -C "apps/frappe" checkout -q -f $tag_name || { echo "Tag $tag_name not found in apps/frappe"; exit 1; }
              git -C "apps/erpnext" checkout -q -f $tag_name || { echo "Tag $tag_name not found in apps/erpnext"; exit 1; }
              git -C "apps/india_compliance" checkout -q -f $tag_name || { echo "Tag $tag_name not found in apps/india_compliance"; exit 1; }

              echo "bench setup requirements"
              bench setup requirements --dev

              echo "Migrating site"
              bench --site test_site migrate

              echo "installing ic in test_site"
              bench --site test_site install-app india_compliance

              echo "Migrating site"
              bench --site test_site migrate

              echo "Resetting environment and installing apps"
              pgrep honcho | xargs kill || true
              rm -rf ~/frappe-bench/env
              bench -v setup env

              echo "Installing ERPNext"
              bench pip install -e ./apps/erpnext

              echo "Installing India Compliance"
              bench pip install -e ./apps/india_compliance

              echo "Starting bench"
              bench start &>> ~/frappe-bench/bench_start.log &

              echo "Migrating site"
              bench --site test_site migrate
          }

          # Call the function with the version number
          update_to_version 14.0.0

          # update_to_version 14
          # update_to_version 15

      - name: Show bench output
        if: ${{ always() }}
        run: |
          cd ~/frappe-bench
          cat bench_start.log || true
          cd logs
          for f in ./*.log*; do
            echo "Printing log: $f";
            cat $f
          done